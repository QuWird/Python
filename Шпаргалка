### 1. Базовый синтаксис Python

#### Условные операторы

**Оператор if** используется для выполнения кода при выполнении определенного условия:
```python
x = 10
if x > 5:
    print("x больше 5")
elif x == 5:
    print("x равен 5")
else:
    print("x меньше 5")
```

#### Циклы

**Цикл for** используется для перебора элементов:
```python
# Перебор списка
fruits = ["яблоко", "банан", "апельсин"]
for fruit in fruits:
    print(fruit)

# Перебор диапазона чисел
for i in range(5):
    print(i)
```

**Цикл while** выполняет код пока условие истинно:
```python
count = 0
while count < 5:
    print(count)
    count += 1
```

#### Вывод информации

**Функция print** используется для вывода данных:
```python
print("Привет, мир!")
name = "Анна"
age = 25
print(f"Меня зовут {name}, мне {age} лет")  # f-строки
```

#### Базовые типы данных

* **Числа**: `int`, `float`
* **Строки**: `str`
* **Списки**: `list`
* **Кортежи**: `tuple`
* **Словари**: `dict`
* **Множества**: `set`

### 2. Базовые структуры алгоритмов

#### Линейная структура

```python
# Пример линейного алгоритма
a = 5
b = 10
c = a + b
print(c)
```

#### Разветвляющаяся структура (условные операторы)

```python
# Пример разветвляющегося алгоритма
x = 10
if x > 0:
    print("Число положительное")
else:
    print("Число отрицательное или ноль")
```

#### Циклическая структура

```python
# Пример циклического алгоритма
sum = 0
for i in range(1, 11):
    sum += i
print(sum)
```

### 3. Типы хэшей и их расшифровка

#### Основные типы хэшей

* **MD5** (Message Digest Algorithm 5)
* **SHA-1** (Secure Hash Algorithm 1)
* **SHA-2** (включая SHA-256, SHA-512)
* **SHA-3**
* **CRC** (Cyclic Redundancy Check)

#### Особенности хэширования

* **Хэширование** — это процесс преобразования данных в фиксированную строку символов
* Хэши необратимы (нельзя восстановить исходные данные из хэша)
* Используются для:
  * Проверки целостности данных
  * Хранения паролей
  * Создания цифровых подписей

#### Пример работы с хэшами в Python

```python
import hashlib

# Создание хэша SHA-256
def create_hash(data):
    hash_object = hashlib.sha256(data.encode())
    return hash_object.hexdigest()

# Сравнение хэшей
def compare_hashes(data1, data2):
    return create_hash(data1) == create_hash(data2)

# Пример использования
original_data = "Мой секретный текст"
hash_value = create_hash(original_data)
print(f"Хэш: {hash_value}")

# Попытка "расшифровки" (невозможно)
# Расшифровка хэша невозможна, так как это односторонний процесс
```

#### Важные моменты

* **Соль** (salt) — случайная строка, добавляемая к данным перед хэшированием для повышения безопасности
* **Итерации** — многократное применение хэширования для усложнения процесса
* **Векторы атак**:
  * Brute-force (полный перебор)
  * Dictionary attack (атака по словарю)
  * Rainbow tables (радужные таблицы)

#### Рекомендации по безопасности

* Используйте современные алгоритмы хэширования (SHA-256 или выше)
* Применяйте соль для каждого хэша
* Избегайте использования MD5 и SHA-1 для критически важных данных
* Храните только хэши паролей, не храните исходные пароли
